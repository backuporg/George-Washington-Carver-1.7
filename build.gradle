buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.matthewprenger:CurseGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: "checkstyle"

checkstyle {
    toolVersion = "6.11.2"
    configFile = new File(rootDir, "checkstyle/checkstyle.xml")
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = "${minecraft_version}-${growthcraft_version}"
group = "mod.growthcraft"
archivesBaseName = "growthcraft"

ext.growthcraftApi = "src/java/growthcraft/api"
ext.forestryApiRoot = "api/ForestryAPI"

class StructExtApi {
    String name
    String api
    String exclusion
    String root = api
}

ext.thaumcraftApi = "api/thaumcraft/api"

StructExtApi[] apis = [
    new StructExtApi(name: "buildcraft", api: "api/buildcraft/api", exclusion: "**/buildcraft/api/meh"),
    new StructExtApi(name: "fossilsarcheology", api: "api/fossilsarcheology/api", exclusion: "**/fossilsarcheology/api/**"),	
    new StructExtApi(name: "forestry", api: "api/ForestryAPI/forestry/api", exclusion: "**/forestry/api/**", root: ext.forestryApiRoot),
    new StructExtApi(name: "invtweaks", api: "api/invtweaks/api", exclusion: "**/invtweaks/api/**"),
    new StructExtApi(name: "mfr", api: "api/powercrystals/minefactoryreloaded/api", exclusion: "**/powercrystals/minefactoryreloaded/api/**"),
    new StructExtApi(name: "thaumcraft", api: ext.thaumcraftApi, exclusion: "**/thaumcraft/api/**"),
    new StructExtApi(name: "extrabiomes", api: "api/extrabiomes/api", exclusion: "**/extrabiomes/api/**")
]

minecraft {
    version = minecraft_forge_version
    mappings = "snapshot_20161111"
    runDir = "run"
    replace "@VERSION@", project.version
    replace "@GRC_MC_VERSION@", minecraft_version
    replace "@GRC_VERSION@", growthcraft_version
}

sourceSets {
    main {
        java {
            srcDir "src/java"
        }
        resources {
            srcDir "src/resources"
        }
    }
    api {
        java {
            srcDir project.growthcraftApi
            for (StructExtApi entry in apis) {
                srcDir entry.api
            }
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version":project.version, "mcversion":project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

repositories {
    flatDir {
       dirs 'libs'
    }
    mavenLocal()
    mavenCentral()
    maven {
        name "applecore"
        url "http://www.ryanliptak.com/maven/"
    }
    maven {
        name "chickenbones"
        url "http://chickenbones.net/maven/"
    }
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
        maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "Mobius Repo"
        url "http://tehnut.info/maven"
    }
    maven {
        name = "ilexiconn"
        url = "https://maven.mcmoddev.com/"
  }

dependencies {
    compile "applecore:AppleCore:${minecraft_version}-${applecore_version}:api"
    deobfCompile "mcp.mobius.waila:Hwyla:1.8.10-B24_1.10.2"
    compile "net.ilexiconn:llibrary:1.7.4-1.10.2:dev"
    runtime "mezz.jei:jei_1.10.2:3.14.6.410"
    testCompile "junit:junit:4.11"
    compile name: 'mp3plugin'
    compile name: 'mp3spi1.9.5'
    compile name: 'tritonus-share-0.3.7-2'
    compile name: 'vorbisspi-1.0.3-1'
}

runClient {
    if( project.hasProperty("mcUsername") && project.hasProperty("mcPassword") ) {
        args "--username=${project.mcUsername}"
        args "--password=${project.mcPassword}"
    }
}

// debugClient {
//    if( project.hasProperty("mcUsername") && project.hasProperty("mcPassword") ) {
//        args "--username=${project.mcUsername}"
//        args "--password=${project.mcPassword}"
//    }
// }

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:all", "-Xlint:deprecation", "-Xlint:rawtypes", "-Xlint:unchecked"]
    options.deprecation = true
    options.encoding = "utf8"
}

// task sourceJar(type: Jar) {
//    from sourceSets.main.allSource
//    from(sourceSets.api.allSource) {
//        for (StructExtApi entry in apis) {
//            exclude entry.exclusion
//        }
//    }
//    classifier = "sources"
// }

javadoc {
    source += sourceSets.api.allSource
    for (StructExtApi entry in apis) {
        exclude entry.exclusion
    }
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from "build/docs/javadoc"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from(sourceSets.api.output) {
        for (StructExtApi api in apis) {
            exclude api.exclusion
        }
    }
    classifier = "deobf"
}

task apiJar(type: Jar) {
    from(sourceSets.api.output) {
        for (StructExtApi api in apis) {
            exclude api.exclusion
        }
    }
    classifier = "api"
}

jar {
    classifier = "complete"
    from(sourceSets.api.output) {
        for (StructExtApi api in apis) {
            exclude api.exclusion
        }
    }
    into("thaumcraft/api") {
        from project.thaumcraftApi + "/LICENSE"
    }
    into("forestry/api") {
        from project.forestryApiRoot + "/LICENSE.txt"
    }
}

build.dependsOn sourceJar, javadocJar, deobfJar, apiJar

}
